name: Build and Release
on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  PROJECT_NAME: fnc

jobs:
  build:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - name: macos-amd64
            runner: macos-latest
            target: x86_64-apple-darwin
          - name: macos-arm64
            runner: macos-latest
            target: aarch64-apple-darwin

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Cache
        uses: Swatinem/rust-cache@v2
      
      - name: Install OpenSSL (macOS)
        if: runner.os == 'macOS'
        run: |
          if [ "${{ matrix.target }}" = "x86_64-apple-darwin" ]; then
            # For x86_64, use a different approach to locate OpenSSL
            brew install openssl@3
            mkdir -p /usr/local/opt/openssl
            # Use a universal2 installation that contains both architectures
            cp -r $(brew --prefix openssl@3)/* /usr/local/opt/openssl/
            echo "OPENSSL_DIR=/usr/local/opt/openssl" >> $GITHUB_ENV
            echo "OPENSSL_LIB_DIR=/usr/local/opt/openssl/lib" >> $GITHUB_ENV
            echo "OPENSSL_INCLUDE_DIR=/usr/local/opt/openssl/include" >> $GITHUB_ENV
            echo "OPENSSL_STATIC=1" >> $GITHUB_ENV
          else
            # For arm64, use default Homebrew path
            brew install openssl@3
            echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          fi
          # For cross-compilation
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV

      - name: Build Binary
        run: |
          if [ "${{ matrix.target }}" = "x86_64-apple-darwin" ]; then
            # For x86_64, set target-specific flags
            RUSTFLAGS="-C link-arg=-mmacosx-version-min=10.9" cargo build --verbose --locked --release --target ${{ matrix.target }}
          else
            cargo build --verbose --locked --release --target ${{ matrix.target }}
          fi

      - name: Package Binary
        shell: bash
        run: |
          mkdir -p release
          cp target/${{ matrix.target }}/release/${PROJECT_NAME} release/
          cd release
          tar -czf ../fnc-${{ matrix.name }}.tar.gz *
          cd ..
          echo "ASSET_PATH=fnc-${{ matrix.name }}.tar.gz" >> $GITHUB_ENV

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.ASSET_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}